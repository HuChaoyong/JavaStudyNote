父类如果是 抽象类

子类在继承时,要实现抽象方法.

用 abstract 修饰的类叫做抽象类

用 abstract 修饰的方法叫做抽象方法

① 抽象类是不能实例化的!!!

②有抽象方法那么必须是抽象类

三 抽象方法不一定有抽象类

④ 抽象方法不能有函数体. {}

------------- 接口  interface ---------------

实现一个接口的时候, 一定要实现接口的所有方法

接口不能被实例化

接口中的方法不能被实现．

一个类可以实现多个接口

接口居然有变量！！！！？？
本质上都静态(static)的，　而且是 final的. 而且不能用private 和 protected 修饰

在开发中,我们经常吧 常用的变量放在接口中, 作为全局变量使用,

接口能继承接口, 但是, 不能继承类, 类能实现的嘛,接口是不能实现的

（接口是更加抽象的抽象类）

--------------------------------------------------------------------------
父类的:
public ***;
protected ***;
 ***;
private ***;

子类继承


public ***;
protectd ***;
 ***; // 注意,这个是没有控制修饰符的属性


意思是,子类不能继承父类的 private 属性和方法

而且,只能继承一个父类!!!!!!!!

java 所有类的祖先就是  Object 类!!!

--------------------------------------------------

《类方法》
静态变量,  原则上用类方法(类的静态方法)去访问. 而不是用实例的方法去访问
如果实例去访问会有两点弊端.
,很容易误解, 以为是调用实例对象的东西,
 每创建一个实例,就会生成一个实例的方法,而这个方法是要占用空间的!!!
注意:
静态方法不能访问实例变量. 因为,如果是类调用它,它是取不到值的.
普通方法是能够访问静态变量的.

psvm() {
 Student a = new Student();
 Student b = new Student();
    a.getTotal(); // 给人感觉是在调用返回a学生的total,而不是类的total
}

class Student {
     public static int total;
     public getTotal() { return total;}
}

--------------------------------------------------

《构造方法重点6句》

1  构造方法和类名相同

2 构造方法没有返回值

3  主要作用是完成新对象的初始化!! (不要把啥子东西都往里面仍)

4 在创建该类的时候,系统自动调用该类的构造方法,(不是用 . 来调用的)

5 一个类可以有多个构造方法(不能完全一样)

6 每个类都有一个默认构造方法,在没有指定时存在.如果指定了一个,就自动消失
--------------------------------------------------

----------------------------------------------------------------------
<访问控制修饰符 和 包的作用>

访问级别       访问控制修饰符          同类        同包        子类        不同包

公开            publi                 √          √          √            √
受保护          protected             √          √          √            x
默认            没有                  √          √           x            x
私有            private               √          x          x            x

包的作用;
区分相通名字的类

    整理和分类, 管理类

    访问控制范围
打包命令:  package  com.xiaoming
而且,一般是放在最前面

引入包   import java.util.

java.long.* 这个包是自动引入的
java.util.*  工具包
Java.net.*  网络包
java.awt.* 窗口包

-----------------------------------------------------------
多态
    是指一个引用类型在不同情况下的多种状态
    可以理解为: 通过指向父类的指针，来调用不同子类中实现的方法

    ①允许父类的引用变量可以引用他的子类的实例（对象）

-----------------------------------------------------------
抽象类  和   接口

    ① 抽象类可以没有抽象方法，但是，有抽象方法就一定得是抽象类
    ② 抽象类不能实现，只能继承
    ③ 子类继承了抽象类，必须全部实现抽象方法
    ④ 抽象方法不能有函数体; // eg:  abstract void eat();

    接口：
    ① 当类实现接口的时候， 必须把这个接口的所有方法都实现
    ② 接口不能实现
    ③ 接口中可以有变量，但是不能用 private 和 protected 修饰
    {   A. 接口中的变量都是静态的(stat ic) 而且是 final 的
        B. 开发中，我们经常把常用的变量，定义在接口中，作为全局变量使用}
    ④ 接口不能继承类，只能继承接口


    接口和抽象类的比较
    ① 抽象类可以有实现了的方法，  接口的方法不能有主体

--------------------------------

final 关键字
修饰方法，表示方法不能被修改，即子类继承后，不能再实现
修饰变量，则不能再改变